const canvas = document.getElementById("unoCanvas");
const ctx = canvas.getContext("2d");

const wildColorPicker = document.getElementById("wildColorPicker");
const unoButton = document.getElementById("unoButton");

canvas.addEventListener("click", async function (event) {
    if (currentPlayer !== 0 || isProcessingTurn) return;

    const mx = event.offsetX, my = event.offsetY;

    if (mx >= 750 && mx <= 830 && my >= 250 && my <= 370) {
        if (!justDrawnCard) {
            await drawCard(currentPlayer, true);
            justDrawnCard = true;

            const playableCardsAfterDraw = playerHands[0].filter(card => canPlay(card, centerCard));
            if (playableCardsAfterDraw.length === 0) {
                justDrawnCard = false;
                endTurn();
                return;
            }
            return;
        } else {
            Swal.fire({ title: "‚ùó ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏à‡∏±‡πà‡∏ß‡πÑ‡∏û‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏ï‡∏≤", icon: "warning", timer: 2000, showConfirmButton: false });
            return;
        }
    }

    for (let i = 0; i < (playerHands?.[0]?.length || 0); i++) {
        const card = playerHands?.[0]?.[i];
        const x = 50 + i * 90 - handOffset;
        const y = 500;
        const canPlayThisCard = canPlay(card, centerCard);

        if (mx >= x && mx <= x + 80 && my >= y && my <= y + 100) {
            if (justDrawnCard) {
                if (canPlayThisCard) {
                    if (card?.value === "Wild" || card?.value === "+4") {
                        wildCardTemp = card;
                        wildCardIndex = i;
                        wildColorPicker.style.display = "block";
                        return;
                    }
                    await playCard(i);
                    justDrawnCard = false;
                    return;
                } else {
                    Swal.fire({ title: "‚ùó ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏ï‡∏≤", icon: "warning", timer: 2000, showConfirmButton: false });
                    return;
                }
            } else if (canPlayThisCard) {
                if (card?.value === "Wild" || card?.value === "+4") {
                    wildCardTemp = card;
                    wildCardIndex = i;
                    wildColorPicker.style.display = "block";
                    return;
                }
                await playCard(i);
                return;
            } else {
                Swal.fire({ title: "‚ùó ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ", icon: "warning", timer: 2000, showConfirmButton: false });
                return;
            }
        }
    }

    if (justDrawnCard) {
        justDrawnCard = false;
        endTurn();
        return;
    }
});

canvas.addEventListener('wheel', (event) => {
    const playerHandY = 500;
    const playerHandHeight = 100;
    if (event.offsetY >= playerHandY && event.offsetY <= playerHandY + playerHandHeight) {
        const scrollSpeed = 50;
        handOffset += event.deltaY > 0 ? scrollSpeed : -scrollSpeed;

        const playerHand = playerHands?.[0];
        const cardSpacing = 90;
        const initialX = 50;
        const cardWidth = 80;
        const totalHandWidth = (playerHand?.length || 0) * cardSpacing;
        const maxOffset = Math.max(0, totalHandWidth - canvas.width + initialX + cardWidth + 20);

        handOffset = Math.max(0, Math.min(handOffset, maxOffset));
        drawGame();
        event.preventDefault();
    }
}, { passive: false });

unoButton.addEventListener("click", () => {
    unoDeclared = true;
    Swal.fire({ title: "‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® UNO ‡πÅ‡∏•‡πâ‡∏ß! ‚úÖ", timer: 1200, showConfirmButton: false });
});

// function showGuide() {
//     Swal.fire({
//         title: 'üìò ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô UNO',
//         html: `
//         <div style="text-align: left; font-size: 1rem; line-height: 1.6;">
//           <strong>üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:</strong><br/>
//           ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏û‡πà‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°<br/><br/>

//           <strong>üîÑ ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:</strong><br/>
//           - ‡πÑ‡∏û‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á <em>‡∏™‡∏µ</em> ‡∏´‡∏£‡∏∑‡∏≠ <em>‡πÄ‡∏•‡∏Ç</em> ‡∏Å‡∏±‡∏ö‡πÑ‡∏û‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤<br/>
//           - ‡πÉ‡∏ä‡πâ <em>‡πÑ‡∏û‡πà‡∏û‡∏¥‡πÄ‡∏®‡∏©</em> ‡πÄ‡∏ä‡πà‡∏ô +2, Skip, Reverse ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Å‡∏°<br/>
//           - <strong>Wild</strong> ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤<br/>
//           - <strong>+4</strong> ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏û‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡πÉ‡∏î‡πÄ‡∏•‡∏¢<br/><br/>

//           <strong>üì£ UNO!</strong><br/>
//           ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® UNO‚Äù ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏û‡πà‡πÉ‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÇ‡∏î‡∏ô‡∏•‡∏á‡πÇ‡∏ó‡∏©!<br/><br/>

//           <strong>üß† AI ‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</strong> ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ä‡∏ô‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£!
//         </div>
//       `,
//         icon: 'info',
//         confirmButtonText: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢!',
//         background: '#1f2937',
//         color: '#fff',
//         confirmButtonColor: '#ef4444',
//         customClass: {
//             popup: 'rounded-xl shadow-2xl backdrop-blur-sm border border-gray-600'
//         }
//     });
// }

initGame();